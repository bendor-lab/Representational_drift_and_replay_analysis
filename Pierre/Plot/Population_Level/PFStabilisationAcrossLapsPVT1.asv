% Reproduction of one of Martha / Masa's plot - PF stabilisation across
% laps ONLY FOR T1 / T3 (cause PFP)

clear

% PATH things
PATH.SCRIPT = fileparts(mfilename('fullpath'));
cd(PATH.SCRIPT)

listFilesToTest = ["\..\..\Data\population_vector_laps.mat", "\..\..\Data\population_vector_lapsLap16RUN1.mat", ...
                   "\..\..\Data\population_vector_lapsLap16RUN2.mat"];

for path = listFilesToTest
    % We get the PV file 
    load(PATH.SCRIPT + path);

    % For all animals and conditions, we mean all laps of T1 and all laps of T2
    % 3 vectors for our 3 variables.
    % We finally cut T1 laps to 16, same for T2

    matCorrT1 = repelem(NaN, length(population_vector_laps), 20); % We overshot the size to be sure
    matEuclidianT1 = repelem(NaN, length(population_vector_laps), 20);
    matCosSimT1 = repelem(NaN, length(population_vector_laps), 20);

    matCorrT3 = repelem(NaN, length(population_vector_laps), 20); % We overshot the size to be sure
    matEuclidianT3 = repelem(NaN, length(population_vector_laps), 20);
    matCosSimT3 = repelem(NaN, length(population_vector_laps), 20);

    count_T1 = 1;
    count_T3 = 1;

    for i = 1:length(population_vector_laps)
        line = population_vector_laps(i);
        track = line.track;

        nbLaps = length(line.allLaps);

        if track == 1
            matCorrT1(count_T1, 1:nbLaps) = [line.allLaps.pvCorrelation]';
            matEuclidianT1(count_T1, 1:nbLaps) = [line.allLaps.euclidianDistance]';
            matCosSimT1(count_T1, 1:nbLaps) = [line.allLaps.cosineSim]';
            count_T1 = count_T1 + 1;
        else
            matCorrT3(count_T3, 1:nbLaps) = [line.allLaps.pvCorrelation]';
            matEuclidianT3(count_T3, 1:nbLaps) = [line.allLaps.euclidianDistance]';
            matCosSimT3(count_T3, 1:nbLaps) = [line.allLaps.cosineSim]';
            count_T3 = count_T3 + 1;
        end
    end

    % Now we can crop the matrices at lap 16

    matCorrT1 = matCorrT1(1:count_T1, 1:16);
    matEuclidianT1 = matEuclidianT1(1:count_T1, 1:16);
    matEuclidianT1(isinf(matEuclidianT1)) 
    matCosSimT1 = matCosSimT1(1:count_T1, 1:16);
    matCorrT3 = matCorrT3(1:count_T3, 1:16);
    matEuclidianT3 = matEuclidianT3(1:count_T3, 1:16);
    matCosSimT3 = matCosSimT3(1:count_T3, 1:16);

    % Now we compute the column mean and std of each one, then plot it
    
    if path == "\..\..\Data\population_vector_laps.mat"
        compared = "FPF";
    elseif path == "\..\..\Data\population_vector_lapsLap16RUN1.mat"
        compared = "R1 - L16";
    else
        compared = "R2 - L16";
    end
    
    %% Plotting -----------------------------------------------------------
    
    figure;
    
    t = tiledlayout(3, 2);
            
    ax1 = nexttile;
    xCorrT1 = mean(matCorrT1, "omitnan");
    stdCorrT1 = std(matCorrT1, "omitnan");
    plot(1:16, xCorrT1, "r");
    title("corr(RUN1, " + compared + ")")
    
    hold on;
    x = 1:length(xCorrT1);
    shade1 = xCorrT1 + stdCorrT1;
    shade2 = xCorrT1 - stdCorrT1;
    x2 = [x,fliplr(x)];
    inBetween = [shade1,fliplr(shade2)];
    h=fill(x2,inBetween,"r");
    set(h,'facealpha',0.1,'LineStyle','none')
    hold off;
    
    ax2 = nexttile;
    xCorrT3 = mean(matCorrT3, "omitnan");
    stdCorrT3 = std(matCorrT3, "omitnan");
    plot(1:16, xCorrT3, "r");
    title("corr(RUN2, " + compared + ")")
    
    hold on;
    x = 1:length(xCorrT3);
    shade1 = xCorrT3 + stdCorrT3;
    shade2 = xCorrT3 - stdCorrT3;
    x2 = [x,fliplr(x)];
    inBetween = [shade1,fliplr(shade2)];
    h=fill(x2,inBetween,"r");
    set(h,'facealpha',0.1,'LineStyle','none')
    hold off;

    ax3 = nexttile;
    xEuclidianT1 = mean(matEuclidianT1, "omitnan");
    stdEuclidianT1 = std(matEuclidianT1, "omitnan");
    plot(1:16, xEuclidianT1, "b");
    title("EuclDist(RUN1, " + compared + ")")
    
    hold on;
    x = 1:length(xEuclidianT1);
    shade1 = xEuclidianT1 + stdEuclidianT1;
    shade2 = xEuclidianT1 - stdEuclidianT1;
    x2 = [x,fliplr(x)];
    inBetween = [shade1,fliplr(shade2)];
    h=fill(x2,inBetween,"b");
    set(h,'facealpha',0.1,'LineStyle','none')
    hold off;

    ax4 = nexttile;
    xEuclidianT3 = mean(matEuclidianT3, "omitnan");
    stdEuclidianT3 = std(matEuclidianT3, "omitnan");
    plot(1:16, xEuclidianT3, "b");
    title("EuclDist(RUN2, " + compared + ")")
    
    hold on;
    x = 1:length(xEuclidianT3);
    shade1 = xEuclidianT3 + stdEuclidianT3;
    shade2 = xEuclidianT3 - stdEuclidianT3;
    x2 = [x,fliplr(x)];
    inBetween = [shade1,fliplr(shade2)];
    h=fill(x2,inBetween,"b");
    set(h,'facealpha',0.1,'LineStyle','none')
    hold off;

    ax5 = nexttile;
    xCosSimT1 = mean(matCosSimT1, "omitnan");
    stdCosSimT1 = std(matCosSimT1, "omitnan");
    plot(1:16, xCosSimT1, "g");
    title("CosSim(RUN1, " + compared + ")")
    
    hold on;
    x = 1:length(xEuclidianT3);
    shade1 = xCosSimT1 + stdCosSimT1;
    shade2 = xCosSimT1 - stdCosSimT1;
    x2 = [x,fliplr(x)];
    inBetween = [shade1,fliplr(shade2)];
    h=fill(x2,inBetween,"g");
    set(h,'facealpha',0.1,'LineStyle','none')
    hold off;

    ax6 = nexttile;
    xCosSimT3 = mean(matCosSimT3, "omitnan");
    stdCosSimT3 = std(matCosSimT3, "omitnan");
    plot(1:16, xCosSimT3, "g");
    title("CosSim(RUN2, " + compared + ")")
    
    hold on;
    x = 1:length(xCosSimT3);
    shade1 = xCosSimT3 + stdCosSimT3;
    shade2 = xCosSimT3 - stdCosSimT3;
    x2 = [x,fliplr(x)];
    inBetween = [shade1,fliplr(shade2)];
    h=fill(x2,inBetween,"g");
    set(h,'facealpha',0.1,'LineStyle','none')
    hold off;

    linkaxes([ax1 ax2],'xy')
    linkaxes([ax3 ax4],'xy')
    linkaxes([ax5 ax6],'xy')

end