% File to generate the fluctuations of PV correlation
% over laps, and the time during laps vs. number of awake replay
% vs. number of SWR

clear
PATH.SCRIPT = fileparts(mfilename('fullpath'));
cd(PATH.SCRIPT)

sessions = data_folders_excl; % We fetch all the sessions folders paths

% Arrays to hold all the data

sessionID = [];
animal = [];
condition = [];
track = [];
exposure = [];
lap = []; % Always N+1 - N
corrDelta = [];

% Extraction & computation

for fileID = 1:length(sessions)

    disp(fileID);
    file = sessions{fileID}; % We get the current session
    [animalOI, conditionOI] = parseNameFile(file); % We get the informations about the current data

    animalOI = string(animalOI);
    conditionOI = string(conditionOI); % We convert everything to string

    % Load the variables

    temp = load(file + "\extracted_place_fields.mat");
    place_fields = temp.place_fields;

    temp = load(file + "\extracted_lap_place_fields.mat");
    lap_place_fields = temp.lap_place_fields;
    
    temp = load(file + "\extracted_laps");
    lap_times = temp.lap_times;
    
    temp = load(file + "\Replay\RUN1_Decoding\significant_replay_events_wcorr");
    significant_replay_events_R1 = temp.significant_replay_events;
    
    temp = load(file + "\Replay\RUN1_Decoding\significant_replay_events_wcorr");
    significant_replay_events_R2 = temp.significant_replay_events;
    
    % Track loop

    for trackOI = 1:2

        other_track = mod(trackOI + 1, 2) + 2*mod(trackOI, 2);

        % Control : Cells that where good place cells during RUN1 and RUN2
        % (no appearing / disappearing cells).
        goodCells = intersect(place_fields.track(trackOI).good_cells, place_fields.track(trackOI + 2).good_cells);
        
        % We get the final place field : mean of the 6 laps following the
        % 16th lap of RUN2

        RUN1LapPFData = lap_place_fields(trackOI).Complete_Lap;
        RUN2LapPFData = lap_place_fields(trackOI + 2).Complete_Lap;

        numberLapsRUN2 = length(RUN2LapPFData);
        finalPlaceField = {};

        % For each cell, we create the final place field
        for cellID = 1:length(place_fields.track(trackOI + 2).smooth)
            temp = [];

            for clap = 1:6
                temp = [temp; RUN2LapPFData{16 + clap}.smooth{cellID}];
            end

            finalPlaceField(end + 1) = {mean(temp, 'omitnan')};
        end
        
        % Main loop across exposures
        for exposureOI = 1:2
            
            if exposureOI == 1
                replay_file = significant_replay_events_R1;
            else
                replay_file = significant_replay_events_R2;
            end

            vTrack = trackOI + mod(exposureOI + 1, 2)*2;
            current_numberLaps = numel(lap_place_fields(vTrack).Complete_Lap);

            if current_numberLaps > 16
                current_numberLaps = 16;
            end
            
            % We need to exclude 1 lap from this analysis
            if current_numberLaps == 1
                continue;
            end

            for lapOI = 1:(current_numberLaps-1)

                place_fields_N = lap_place_fields(vTrack).Complete_Lap{lapOI}.smooth;
                place_fields_N1 = lap_place_fields(vTrack).Complete_Lap{lapOI+1}.smooth;

                pvCorr_N = getPVCor(goodCells, place_fields_N, finalPlaceField, "pvCorrelation");
                pvCorr_N = median(pvCorr_N, 'omitnan');
                
                pvCorr_N1 = getPVCor(goodCells, place_fields_N1, finalPlaceField, "pvCorrelation");
                pvCorr_N1 = median(pvCorr_N1, 'omitnan');
                
                corFluc = pvCorr_N1 - pvCorr_N;
                
                % We find the amount of awake replay / SWR / time between
                % the two laps
                
                % Duration of the lap l + 1
                lap_duration = lap_times(vTrack).duration(lapOI + 1);
                
                % We get the end zone for l and l+1
                
                endzone_lapL_x = lap_times(vTrack).end_zone(lapOI).x;
                endzone_lapL_t = lap_times(vTrack).end_zone(lapOI).t;
                
                endzone_lapL1_x = lap_times(vTrack).end_zone(lapOI + 1).x;
                endzone_lapL1_t = lap_times(vTrack).end_zone(lapOI + 1).t;
                
                % We're looking for the 

                % Save the data
                
                sessionID = [sessionID; fileID];
                animal = [animal; animalOI];
                condition = [condition; conditionOI];
                track = [track; trackOI];
                exposure = [exposure; exposureOI];
                lap = [lap; lapOI];
                corrDelta = [corrDelta; corFluc];


            end
        end
    end
end



% We mutate to only have the number of lap run during RUN1 (assuming not intra),
% not 16x...

condition(track == 1) = 16;
newConditions = split(condition(track ~= 1), 'x');
condition(track ~= 1) = newConditions(:, 2);

condition = str2double(condition);

data = table(sessionID, animal, condition, exposure, lap, corrDelta);

save("pv_correlation_fluc.mat", "data")