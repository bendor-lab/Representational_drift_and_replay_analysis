clear

load("phase_data.mat");

%% Analysis : difference in mean phase between appearing / disappearing cells / stable cells / unstable ?

allLabels = unique(phase_data.label);

figure;
tiledlayout(1, 3);
nexttile;
circ_plot(phase_data.meanPhase(phase_data.label == "Appears"), "pretty");
title("Appears cells")
nexttile;
circ_plot(phase_data.meanPhase(phase_data.label == "Disappear"), "pretty");
title("Disappear cells")
nexttile;
circ_plot(phase_data.meanPhase(phase_data.label == "Stable"), "pretty");
title("Stable cells")

%% Look at the link with refinement

figure;
for i = 1:numel(allLabels)
    current_label = allLabels(i);
    s = scatter(phase_data.meanPhase(phase_data.label == current_label), ...
                phase_data.refinCM(phase_data.label == current_label), 'filled');
    hold on;
end

legend(allLabels);

%% Look at phase tuning for each animal

allAnimals = unique(phase_data.animal);
allConditions = [1, 2, 3, 4, 8, 16];

for anID = 1:numel(allAnimals)
    figure;
    tiledlayout(3, 2)

    for cID = 1:numel(allConditions)
        current_data = phase_data(phase_data.animal == allAnimals(anID) ...
                             & data.condition == allConditions(cID), :);

        nexttile;
        if allConditions(cID) == 16
            allSessions = [find(current_data.cell == 1); numel(current_data.cell)];

            for sID = 1:numel(allSessions)-1
                plot(current_data(allSessions(sID):allSessions(sID+1), :).replay_time, ...
                     current_data(allSessions(sID):allSessions(sID+1), :).bayesian_bias);
                hold on;
            end
            hold off;

        else
            plot(current_data.replay_time, current_data.bayesian_bias);
        end

        title("Condition : " + num2str(allConditions(cID)) + " laps")
        ylim([-1, 1])
        xlim([0, 1800])
    end

end

%%

figure;
tiledlayout(1, 3);
nexttile;
histogram(phase_data.meanPhase(phase_data.label == "Stable"), 20);
nexttile;
histogram(phase_data.meanPhase(phase_data.label == "Appears"), 20);
nexttile;
histogram(phase_data.meanPhase(phase_data.label == "Disappear"), 20);

%%

figure;
tiledlayout(1, 3);
nexttile;
histogram(phase_data.phaseLocking(phase_data.label == "Stable"), 20);
nexttile;
histogram(phase_data.phaseLocking(phase_data.label == "Appears"), 20);
nexttile;
histogram(phase_data.phaseLocking(phase_data.label == "Disappear"), 20);

figure;
boxchart(categorical(phase_data.label), phase_data.phaseLocking);

% Slight difference

% To do inferential stats, we bootstrap

p_values = zeros(1, 1000);
stable_vs_dis = zeros(1, 1000);
stable_vs_app = zeros(1, 1000);
dis_vs_app = zeros(1, 1000);

allStable = phase_data.phaseLocking(phase_data.label == "Stable");
allApp = phase_data.phaseLocking(phase_data.label == "Appears");
allDis = phase_data.phaseLocking(phase_data.label == "Disappear");

parfor iter = 1:1000
    if mod(iter, 20) == 0
        disp(iter);
    end

    subset_stable = allStable(randperm(numel(allStable), numel(allApp)));
    subset_dis = allDis(randperm(numel(allDis), numel(allApp)));
    
    data_concat = [subset_stable subset_dis allApp];

    p = anova1(data_concat);
    svd = ranksum(subset_stable, subset_dis);
    sva = ranksum(subset_stable, allApp);
    dva = ranksum(subset_stable, allApp);
    
    p_values(iter) = p;
end

proportion_under_05 = sum(p_values <= 0.00001)/numel(p_values);

%% 
scatter(phase_data.phaseLocking, phase_data.refinCM)